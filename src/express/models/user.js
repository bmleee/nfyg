// Load the module dependencies
import mongoose from 'mongoose'
import crypto from 'crypto'
import { autoIncrement } from '../lib/db'
import PurchaseModel from './purchase'

import FacebookTracker from '../../lib/FacebookTracker'

export const access_levels = [0, 1, 10, 100]

const Schema = mongoose.Schema;

// Define a new 'UserSchema'
const UserSchema = new Schema({
	id: { type: Number, required: true, unique: true }, // sequence number

	// only for facebook user
	fb_id: { type: String, trim: true },
	fb_access_token: { type: String, trim: true },

	salt: { type: String },

	name: { type: String, trim: true, }, // real name
	display_name: { type: String, required: true, trim: true },

	local_email: { type: String, unique: true, trim: true,
		// Validate the email format
		match: [/.+\@.+\..+/, "Please fill a valid email address"]
	},
	fb_email: { type: String, unique: true, trim: true,
		// Validate the email format
		match: [/.+\@.+\..+/, "Please fill a valid email address"]
	},

	/*
	 0 : nomal user
	 1 : artist, can publish / edit project, exhibition
	 10 : editor, can publish / edit magazine
	 100 : admin, can do anything
	 */
	access_level: { type: Number, default: 0, },
	// generated by hasher
	password: { type: String, },

	image: {
		type: String,
		default: '/assets/images/user_default.png'
	},

	payments: [{ type: Schema.Types.ObjectId, ref: 'Payment' }],
	projects: [{ type: Schema.Types.ObjectId, ref: 'Project' }],
	products: [{ type: Schema.Types.ObjectId, ref: 'Project' }],
});

// Configure the 'UserSchema' to use getters and virtuals when transforming to JSON
UserSchema.set('toJSON', {
	getters: true,
	virtuals: true
});

UserSchema.statics.findOneByEmail = function (email, cb) {
	return this.findOne({
		$or: [
			{fb_email: email},
			{local_email: email}
		]
	}, cb)
}

UserSchema.methods.toFormat = async function(type, ...args) {
	switch (type) {
		case 'profile':
			return await _renderProfile(this)
		default:
			return {}
	}
}

UserSchema.methods.supportedMoney = async function({projectName, productName}) {
	try {
		let [
			purchases,
			shares
		] = await Promise.all([
			PurchaseModel.findByUser(this),
			FacebookTracker.getUserSummaryOnProject(this.id, projectName || productName),
		])

		const sum = (a, b) => a + b

		return purchases.map(p => p.purchase_info.amount).reduce(sum) +
			shares.map(s => 1000 + 200 * (s.comments + s.shares + s.likes)).reduce(sum)
	} catch (e) {
		console.error(e);
		return 0;
	}
};

UserSchema.plugin(autoIncrement.plugin, { model: 'User', field: 'id' });

// Create the 'User' model out of the 'UserSchema'
const UserModel = mongoose.model('User', UserSchema);
export default UserModel

// Helperfunctions

const _renderProfile = async (_this) => {
	switch (this.access_level) {
		case 0: // normal user
			return {

			}
		case 1: // artist
			return {

			}
		case 10: // editor
			return {

			}
		case 100: // admin
			return {

			}
		default:
			throw new Error(`[User ${this.id}] No such access level ${this.access_level}`)
	}
}
